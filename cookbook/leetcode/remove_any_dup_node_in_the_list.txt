// 移出列表中的重复元素，元素只要存在重复就不应出现子新列表中
---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur, delCur := head, false
	for cur != nil {
		if cur.next != nil {
			if cur.next.v != cur.v {
				if delCur {
					return removeDup(cur.next)
				} else {
					cur.next = removeDup(cur.next)
					return cur
				}
			} else {
				delCur = true
				cur = cur.next
				continue
			}
		} else {
			if delCur {
				return nil
			} else {
				return cur
			}
		}
	}
	return nil
}
---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur, delCur := head, false
	for cur != nil && cur.next != nil {
		if cur.next.v != cur.v {
			if delCur {
				return removeDup(cur.next)
			} else {
				cur.next = removeDup(cur.next)
				return cur
			}
		} else {
			delCur = true
			cur = cur.next
			continue
		}
	}
	if delCur {
		return nil
	}
	return cur
}
---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur, delCur := head, false
	for cur != nil && cur.next != nil {
		if cur.next.v == cur.v {
			delCur = true
			cur = cur.next
			continue
		}
		if delCur {
			return removeDup(cur.next)
		} else {
			cur.next = removeDup(cur.next)
			return cur
		}
	}
	if delCur {
		return nil
	}
	return cur
}
---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur, delCur := head, false
	for cur != nil && cur.next != nil {
		if cur.next.v == cur.v {
			delCur = true
			cur = cur.next
		}
	}
	if delCur {
		return removeDup(cur.next)
	}
	cur.next = removeDup(cur.next)
	return cur
}
---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur, delCur := head, false
	for cur != nil && cur.next != nil && cur.next.v == cur.v {
		cur, delCur = cur.next, true
	}
	if delCur {
		return removeDup(cur.next)
	}
	cur.next = removeDup(cur.next)
	return cur
}

---
func removeDup(head *node) *node {
	if head == nil {
		return nil
	}
	cur := head
	for cur != nil && cur.next != nil && cur.next.v == cur.v {
		cur = cur.next
	}
	if cur != head {
		return removeDup(cur.next)
	}
	cur.next = removeDup(cur.next)
	return cur
}

---
func removeDup(head *node) *node {
	if head == nil || head.next == nil {
		return head
	}
	cur := head
	for cur != nil && cur.next != nil && cur.next.v == cur.v {
		cur = cur.next
	}
	if cur != head {
		return removeDup(cur.next)
	}
	cur.next = removeDup(cur.next)
	return cur
}
----
func removeDup2(head *node) *node {
	if head == nil || head.next == nil {
		return head
	}
	// 一个节点记录头
	// 一个节点记录前驱,用于连接后面的节点
	// 不断迭代当前节点
	ret, pre, cur := (*node)(nil), (*node)(nil), head
	for cur != nil {
		bak := cur
		for cur.next != nil && cur.next.v == cur.v {
			cur = cur.next
		}
		if cur == bak {
			if ret == nil {
				ret = cur
			}
			if pre != nil {
				pre.next = cur
			}
			pre = cur
		}
		cur = cur.next
	}
	if pre != nil {
		pre.next = nil
	}
	return ret
}